import{s as x,a as f,e as w,n as T}from"./scheduler.DVE4yslD.js";import{S as k,i as z,f as $,h as C,m as I,t as j,j as M,k as q,e as d,s as b,c as m,g as p,a as g,b as c,d as u}from"./index.DcLpJe-d.js";import{M as D,g as S,a as y}from"./mdsvex.6x2AQoBc.js";function N(r){let e,i='This is a quick writeup about a <a href="https://sambhavg.github.io/medal" rel="nofollow">visualization</a> I made a couple weeks ago where I used three.js to put together an interactive 3D layer cake of medal sorting schemes, where each scheme assigned a different value to silver and bronze medals with respect to gold. The visualization was inspired by a <a href="https://www.nytimes.com/interactive/2024/07/29/upshot/olympics-medal-table-paris.html" rel="nofollow">New York Times</a> piece in which they identified that most of the schemes for ranking Olympic teams by the number of gold, silver, and bronze medals are actually just points in a 2D space, where one dimension is the value of silver with respect to gold, and the other is the value of bronze with respect to silver.',o,n,t="This accounts for all points-based schemes - you can come up with weirder schemes like points = gold^3 + silver^2 + bronze, but most schemes fall somewhere on this 2D plane. If we add the restriction that better medals are always worth at least as many points, we get a quarter of a plane, and if we scale the axis in the other direction exponentially, we get an enclosed square.",s,l,v="The NYT shows all their squares separately, but you can actually interleave the planes with each other by representing placement with not color, but height. This is what I do with my visualization: I keep the medal value axes the same, but I stack the planes in 3D so you can see all of the rankings at once. I don’t claim it’s easier to understand than the NYT version (it’s probably much harder), but that’s the idea. I also smooth out the planes so they don’t sharply snap up and down at the border lines you can see in the NYT version.";return{c(){e=d("p"),e.innerHTML=i,o=b(),n=d("p"),n.textContent=t,s=b(),l=d("p"),l.textContent=v},l(a){e=m(a,"P",{"data-svelte-h":!0}),p(e)!=="svelte-36z1pt"&&(e.innerHTML=i),o=g(a),n=m(a,"P",{"data-svelte-h":!0}),p(n)!=="svelte-sgczjc"&&(n.textContent=t),s=g(a),l=m(a,"P",{"data-svelte-h":!0}),p(l)!=="svelte-1d2f683"&&(l.textContent=v)},m(a,h){c(a,e,h),c(a,o,h),c(a,n,h),c(a,s,h),c(a,l,h)},p:T,d(a){a&&(u(e),u(o),u(n),u(s),u(l))}}}function O(r){let e,i;const o=[r[0],_];let n={$$slots:{default:[N]},$$scope:{ctx:r}};for(let t=0;t<o.length;t+=1)n=f(n,o[t]);return e=new D({props:n}),{c(){$(e.$$.fragment)},l(t){C(e.$$.fragment,t)},m(t,s){I(e,t,s),i=!0},p(t,[s]){const l=s&1?S(o,[s&1&&y(t[0]),s&0&&y(_)]):{};s&2&&(l.$$scope={dirty:s,ctx:t}),e.$set(l)},i(t){i||(j(e.$$.fragment,t),i=!0)},o(t){M(e.$$.fragment,t),i=!1},d(t){q(e,t)}}}const _={title:"Sorting Medals",description:"Every possible way to rank the Olympic teams, now in 3D",date:"2024-08-31",published:!0};function P(r,e,i){return r.$$set=o=>{i(0,e=f(f({},e),w(o)))},e=w(e),[e]}class Y extends k{constructor(e){super(),z(this,e,P,O,x,{})}}const A=Object.freeze(Object.defineProperty({__proto__:null,default:Y,metadata:_},Symbol.toStringTag,{value:"Module"}));export{A as _};
