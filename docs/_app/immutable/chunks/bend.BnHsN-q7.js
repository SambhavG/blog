import{s as Hn,c as Yn,u as Jn,g as Rn,a as Xn,b as hs,e as Ln,n as Zn}from"./scheduler.Bbwc-GOu.js";import{S as zn,i as jn,t as Nn,f as qn,h as tl,j as el,m as sl,k as nl,e as o,s as l,H as v,c as p,g as i,a,l as A,n as y,b as s,d as n}from"./index.bS2X9F8q.js";import{g as ll,a as Pn}from"./spread.CgU5AtxT.js";function al(h){let r;const C=h[1].default,u=Yn(C,h,h[0],null);return{c(){u&&u.c()},l(d){u&&u.l(d)},m(d,c){u&&u.m(d,c),r=!0},p(d,[c]){u&&u.p&&(!r||c&1)&&Jn(u,C,d,d[0],r?Xn(C,d[0],c,null):Rn(d[0]),null)},i(d){r||(Nn(u,d),r=!0)},o(d){qn(u,d),r=!1},d(d){u&&u.d(d)}}}function ol(h,r,C){let{$$slots:u={},$$scope:d}=r;return h.$$set=c=>{"$$scope"in c&&C(0,d=c.$$scope)},[d,u]}class pl extends zn{constructor(r){super(),jn(this,r,ol,al,Hn,{})}}function il(h){let r,C="Contents",u,d,c='<li><a href="#introduction">Introduction</a></li> <li><a href="#quick-background">Quick background</a></li> <li><a href="#goal">Goal</a></li> <li><a href="#attempt-1-lists">Attempt 1: Lists</a></li> <li><a href="#attempt-2-maps">Attempt 2: Maps</a></li> <li><a href="#attempt-3-maps-merge-sort-style">Attempt 3: Maps, merge-sort style</a></li> <li><a href="#fold-is-a-subset-of-match-but-why-use-fold"><em>fold</em> is a subset of <em>match</em>; but why use fold?</a></li> <li><a href="#attempt-4-no-maps-custom-trees">Attempt 4: No maps, custom trees</a></li> <li><a href="#in-general-implementations-must-be-tailored-for-bend">In general, implementations must be tailored for Bend</a></li> <li><a href="#too-much-matching">Too much matching</a></li> <li><a href="#speed-test">Speed test</a></li> <li><a href="#conclusion">Conclusion</a></li>',m,f,ys="Introduction",Zt,I,ms='I decided to try the new <a href="https://github.com/HigherOrderCO/Bend" rel="nofollow">Bend</a> programming language.',te,L,fs="Bend has two main goals:",ee,P,vs="<li>In Bend, if your code can run in parallel, it will run in parallel</li> <li>Bend is as easy to write as Python</li>",se,M,As="This post is my attempt at a case study with my thoughts about the language mixed in.",ne,H,Ds="Disclaimer: this post almost certainly has errors and misunderstandings about Bend. My background is as a university math/CS student with some functional programming knowledge.",le,D,ws="Quick background",ae,z,xs="Bend uses two keywords not common in mainstream languages: <em>fold</em> and <em>bend</em>. The idea of <em>fold</em> is to essentially do a Ctrl+F find and replace in a recursive data structure: if I wanted to replace all the leaf nodes (with values) in a tree with their doubles, I would write the following function:",oe,Ht,$n=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#767C9DB0;font-style:italic"># This is the default type Tree</span></span>
<span class="line"><span style="color:#A6ACCDC0">type</span><span style="color:#A6ACCD"> Tree:</span></span>
<span class="line"><span style="color:#A6ACCD">  Node &#123; </span><span style="color:#91B4D5">~</span><span style="color:#A6ACCD">left, </span><span style="color:#91B4D5">~</span><span style="color:#A6ACCD">right &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">  Leaf &#123; value &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91B4D5">def</span><span style="color:#ADD7FF"> doubleTree</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">t</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#A6ACCD">	fold t:</span></span>
<span class="line"><span style="color:#5DE4C7C0">		case</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node:</span></span>
<span class="line"><span style="color:#5DE4C7C0">			return</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node(t.left, t.right)</span></span>
<span class="line"><span style="color:#5DE4C7C0">		case</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf:</span></span>
<span class="line"><span style="color:#5DE4C7C0">			return</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf(t.value </span><span style="color:#91B4D5">*</span><span style="color:#5DE4C7"> 2</span><span style="color:#A6ACCD">)</span></span></code></pre>`,zt,j,bs="When we have our Tree t, we treat it like a linked list where we “go to” its left and right nodes whenever it’s not a leaf, and we double whenever we are at the leaf.",pe,N,Bs="The unseen bit of logic here is that whenever we write t.left, or t.right, since those are defined to be recursive (as denoted by the ~ in the type definition), they are Trees themselves. Thus, the <em>fold</em> folds back and runs the whole chunk of logic on that object too. The Leaf case terminates because value is not a recursive entry.",ie,q,_s="This is essentially a BFS on the tree, where each branch can be computed in parallel, and opportunities for parallel computing like this are how Bend is able to multithread programs.",re,$,ks="What we wrote is (mostly) equivalent to this C program:",de,jt,On=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">void</span><span style="color:#ADD7FF"> doubleTree</span><span style="color:#A6ACCD">(Tree</span><span style="color:#91B4D5">*</span><span style="color:#E4F0FB"> t</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    // No tree</span></span>
<span class="line"><span style="color:#A6ACCD">    if (</span><span style="color:#91B4D5">!</span><span style="color:#A6ACCD">t) return;</span></span>
<span class="line"><span style="color:#A6ACCD">    </span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    // Leaf</span></span>
<span class="line"><span style="color:#A6ACCD">    if (</span><span style="color:#91B4D5">!</span><span style="color:#E4F0FB">t</span><span style="color:#A6ACCD">-></span><span style="color:#E4F0FB">left</span><span style="color:#91B4D5"> &#x26;&#x26;</span><span style="color:#91B4D5"> !</span><span style="color:#E4F0FB">t</span><span style="color:#A6ACCD">-></span><span style="color:#E4F0FB">right</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#E4F0FB">        t</span><span style="color:#A6ACCD">-></span><span style="color:#E4F0FB">value</span><span style="color:#91B4D5"> *=</span><span style="color:#5DE4C7"> 2</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">        return;</span></span>
<span class="line"><span style="color:#A6ACCD">    &#125;</span></span>
<span class="line"><span style="color:#A6ACCD">    </span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">    // Non-leaf</span></span>
<span class="line"><span style="color:#E4F0FBD0">    doubleTree</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">t</span><span style="color:#A6ACCD">-></span><span style="color:#E4F0FB">left</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#E4F0FBD0">    doubleTree</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">t</span><span style="color:#A6ACCD">-></span><span style="color:#E4F0FB">right</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,Nt,O,gs="The <em>bend</em> operation is somewhat similar to <em>fold</em>, but it’s used to build up a structure rather than operate on an existing one. The following <em>bend</em> creates a tree of depth d:",ce,qt,Sn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">def</span><span style="color:#ADD7FF"> makeTree</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">d</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#A6ACCD">	bend d:</span></span>
<span class="line"><span style="color:#A6ACCD">		when d </span><span style="color:#91B4D5">></span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#A6ACCD">			t </span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node(fork(d</span><span style="color:#91B4D5">-</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">), fork(d</span><span style="color:#91B4D5">-</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">))</span></span>
<span class="line"><span style="color:#5DE4C7C0">		else</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#A6ACCD">			t </span><span style="color:#91B4D5">=</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf(</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">)</span></span>
<span class="line"><span style="color:#5DE4C7C0">	return</span><span style="color:#A6ACCD"> t</span></span></code></pre>`,$t,S,Ts="Here, <em>fork</em> is used to build another tree with a different argument to bend; each fork loops back to the beginning of bend. Fork is just an explicit version of the thing <em>fold</em> does where it finds and recurses on the recursive arguments.",ue,w,Fs="Goal",Ce,U,Es="I’m going to try to implement a function which multiplies two matrices.",he,x,Is="Attempt 1: Lists",ye,W,Ls="The first thing I tried was to naturally represent my vectors and matrices as lists and lists of lists respectively. This has a big problem. In Bend, Lists are linked lists. Each list is just the first number and a reference to the rest of the list. To compute the dot product of two equal length lists, we’d compute:",me,Ot,Un=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">def</span><span style="color:#ADD7FF"> dot</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">v1</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">v2</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#5DE4C7C0">	match</span><span style="color:#A6ACCD"> v1:</span></span>
<span class="line"><span style="color:#5DE4C7C0">		case</span><span style="color:#A6ACCD"> List</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Nil:</span></span>
<span class="line"><span style="color:#5DE4C7C0">			return</span><span style="color:#5DE4C7"> 0</span></span>
<span class="line"><span style="color:#5DE4C7C0">		case</span><span style="color:#A6ACCD"> List</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Cons:</span></span>
<span class="line"><span style="color:#5DE4C7C0">			match</span><span style="color:#A6ACCD"> v2:</span></span>
<span class="line"><span style="color:#5DE4C7C0">				case</span><span style="color:#A6ACCD"> List</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Nil:</span></span>
<span class="line"><span style="color:#5DE4C7C0">					return</span><span style="color:#5DE4C7"> 0</span><span style="color:#767C9DB0;font-style:italic"> #should never get here</span></span>
<span class="line"><span style="color:#5DE4C7C0">				case</span><span style="color:#A6ACCD"> List</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Cons:</span></span>
<span class="line"><span style="color:#5DE4C7C0">					return</span><span style="color:#A6ACCD"> v1.head</span><span style="color:#91B4D5">*</span><span style="color:#A6ACCD">v2.head</span><span style="color:#91B4D5">+</span><span style="color:#A6ACCD">dot(v1.tail,v2.tail)</span></span></code></pre>`,St,G,Ps="(Note: each List is either a List/Nil or a List/Cons, where List/Nil is an empty list and List/Cons is not. When our tail is empty, it will be a List/Nil, but until then it will be a LIst/Cons.)",fe,Q,Ms="This computation is sequential because if the entry-wise products were 1, 2, 3, 4, 5, 6, 7, we’d be computing 1+ (2+ (3+ (4+ (5+ (6 + 7))))), which must be computed in consecutive order. Bend has no way to optimize a computation like this, as each + depends on another + to complete first.",ve,V,Hs="It seems like any computation involving lists will take O(n) time - for this reason, I struggle to think of a situation where the List datatype would ever be useful in a language like Bend, assuming A) it is not used simply as an O(1) sized tuple, and B) the programmer who chose Bend would like to take full advantage of Bend’s main feature. I’ll mention a caveat later.",Ae,b,zs="Attempt 2: Maps",De,K,js="Bend also has a map datatype. This map works similar to normal maps or dictionaries in other languages, and in theory can be used to simulate an indexable list which avoids the sequentiality of Lists.",we,Y,Ns="The underlying structure of a Map is interesting; Maps represent the data as a binary tree where each node is either a Node or a Leaf. Leaves are just blank end caps in this case, and don’t hold data. Each Node either does or doesn’t contain a value, as well as a reference to left and right nodes. Nodes with no value contain a * instead.",xe,J,qs="This tree is designed such that every key (that we initialized the map with) corresponds with exactly one node, where for each key k (in binary), the corresponding node is the one we get to by reading the binary little-endian (least to most significant bit) and stepping left for 0, right for 1. For example, all odd numbers end up to the right of the root since they have last digit 1. Keys must be representable as nonnegative integers to make this scheme work.",be,R,$s="For this approach, I directly use the map structure as a vector (so m[i] is the i’th index of the vector) and compute dot product recursively on the tree. The issue I ran into is that while I can “match” the difference between a Leaf and a Node, I couldn’t find a way to match the difference between a * and an actual value, so I couldn’t find a way to compute dot product recursively as v1.value * v2.value + dot(v1.left, v2.left) + dot(v1.right, v2.right) without the * valued nodes messing up the computation.",Be,B,Os="Attempt 3: Maps, merge-sort style",_e,X,Ss="Alternatively, I can use the map indexing syntax. My function should take the dot product of the left half and right half of the first map with the left half and right half of the second map respectively.",ke,Ut,Wn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">def</span><span style="color:#ADD7FF"> dotProduct</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">v1</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">v2</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">l</span><span style="color:#A6ACCD">, </span><span style="color:#E4F0FB">r</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#5DE4C7C0">  if</span><span style="color:#A6ACCD"> l </span><span style="color:#91B4D5">==</span><span style="color:#A6ACCD"> r:</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#A6ACCD"> v1[l] </span><span style="color:#91B4D5">*</span><span style="color:#A6ACCD"> v2[r]</span></span>
<span class="line"><span style="color:#5DE4C7C0">  else</span><span style="color:#A6ACCD">:</span></span>
<span class="line"><span style="color:#5DE4C7C0">    return</span><span style="color:#A6ACCD"> dotProduct(v1, v2, l, (l</span><span style="color:#91B4D5">+</span><span style="color:#A6ACCD">r)</span><span style="color:#91B4D5">/</span><span style="color:#5DE4C7">2</span><span style="color:#A6ACCD">) </span><span style="color:#91B4D5">+</span><span style="color:#A6ACCD"> </span></span>
<span class="line"><span style="color:#A6ACCD">	       dotProduct(v1, v2, (l</span><span style="color:#91B4D5">+</span><span style="color:#A6ACCD">r)</span><span style="color:#91B4D5">/</span><span style="color:#5DE4C7">2</span><span style="color:#91B4D5">+</span><span style="color:#5DE4C7">1</span><span style="color:#A6ACCD">, r)</span></span></code></pre>`,Wt,Z,Us="This turns out to work, but it’s a bit less efficient than approach 2 would have been - while approach 2 would traverse the tree just once, this approach has to fetch every element individually starting from the top - a slowdown of log n.",ge,tt,Ws="We also have to deal with merging our results. When we multiply two vectors, we end up with lots of single numbers that need to go in a new vector, but no straightforward way to merge them all together and keep the correct indexing.",Te,et,Gs="The best (and only), but still problematic way I found to do this was to merge two vectors (and later, two matrices) by pushing one element of the second vector into the first vector, then recursing until the first vector has all of the second vector’s elements. This requires that the second vector has nonstandard map indices starting at whatever the first vector ends at, or else indices will be messed up once the two vectors are mashed together.",Fe,st,Qs="This is definitely not computationally optimal because we are doing a ridiculous amount of extra work; Bend’s variables are immutable, so each time we move one element over, we have to copy the first vector or matrix (this is probably optimized under the hood, like in Haskell). We’re also moving each element to a different map O(log n) times instead of O(1) times if we just moved everything into one map by looping through the results. This was the best I could figure out under the restrictions of Bend, however.",Ee,nt,Vs="Code for this approach is in <code>map.bend</code>.",Ie,_,Ks="<em>fold</em> is a subset of <em>match</em>; but why use fold?",Le,lt,Ys="Quick tangent: Bend has a <em>match</em> keyword which takes a structure and does something with it based on what its type is. It turns out (as mentioned in the docs) that the fold operation is syntactic sugar for match:",Pe,Gt,Gn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCD">fold t:</span></span>
<span class="line"><span style="color:#5DE4C7C0">	case</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node:</span></span>
<span class="line"><span style="color:#5DE4C7C0">		return</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node(t.left, t.right)</span></span>
<span class="line"><span style="color:#5DE4C7C0">	case</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf:</span></span>
<span class="line"><span style="color:#5DE4C7C0">		return</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf(t.value </span><span style="color:#91B4D5">*</span><span style="color:#5DE4C7"> 2</span><span style="color:#A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">#Same computation using match wrapped in a function</span></span>
<span class="line"><span style="color:#91B4D5">def</span><span style="color:#ADD7FF"> doubleTree</span><span style="color:#A6ACCD">(</span><span style="color:#E4F0FB">t</span><span style="color:#A6ACCD">):</span></span>
<span class="line"><span style="color:#5DE4C7C0">	match</span><span style="color:#A6ACCD"> t:</span></span>
<span class="line"><span style="color:#5DE4C7C0">		case</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node:</span></span>
<span class="line"><span style="color:#5DE4C7C0">			return</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Node(doubleTree(t.left), doubleTree(t.right))</span></span>
<span class="line"><span style="color:#5DE4C7C0">		case</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf:</span></span>
<span class="line"><span style="color:#5DE4C7C0">			return</span><span style="color:#A6ACCD"> Tree</span><span style="color:#91B4D5">/</span><span style="color:#A6ACCD">Leaf(t.value </span><span style="color:#91B4D5">*</span><span style="color:#5DE4C7"> 2</span><span style="color:#A6ACCD">)</span></span></code></pre>`,Qt,at,Js="This also works if we pass arguments to fold, since functions can take arguments too.",Me,ot,Rs="The issue with <em>fold</em> as a replacement of loops is that <em>fold</em> only works when the recursive calls only require themselves (and maybe some bookkeeping arguments). As we want to use two structures simultaneously, as in my case with dot products, we have to revert to the match syntax.",He,pt,Xs="I also think using <em>fold</em> instead of <em>match</em> is rather confusing in general, as the way <em>fold</em> manages recursion is not obvious unless you’ve read and understood the Bend manual (I think <em>match</em> is pretty intuitive in contrast).",ze,it,Zs="It can be seen that <em>bend</em> is also syntactic sugar for an if/else statement wrapped in a function (though <em>bend</em> uses the <em>when</em> <em>else</em> syntax; I don’t know if there’s a difference.)",je,k,tn="Attempt 4: No maps, custom trees",Ne,rt,en="Here, we trim the desire for baked-in indexability and use a barebones tree structure to represent matrices and vectors.",qe,dt,sn="We create a MatrixTree datatype with four variations: Leaf (a single value), Vector (a tree where each left and right subtree is either a vector or a leaf), Matrix (a tree where each left and right subtree is either a matrix or a vector), and Nil.",$e,Vt,Qn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#A6ACCDC0">type</span><span style="color:#A6ACCD"> MatrixTree:</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	#Single value in a vector</span></span>
<span class="line"><span style="color:#A6ACCD">	Leaf &#123; value &#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	#Vector of values divided in two</span></span>
<span class="line"><span style="color:#A6ACCD">	Vector &#123;</span><span style="color:#91B4D5">~</span><span style="color:#A6ACCD">left, </span><span style="color:#91B4D5">~</span><span style="color:#A6ACCD">right&#125;</span></span>
<span class="line"><span style="color:#767C9DB0;font-style:italic">	#Matrix of vectors divided in two</span></span>
<span class="line"><span style="color:#A6ACCD">	Matrix &#123;</span><span style="color:#91B4D5">~</span><span style="color:#A6ACCD">topHalf, </span><span style="color:#91B4D5">~</span><span style="color:#A6ACCD">bottomHalf&#125;</span></span>
<span class="line"><span style="color:#A6ACCD">	Nil</span></span></code></pre>`,Kt,ct,nn="From here, our computations are very natural. To multiply two matrices, we need to split the first matrix in half until it’s all rows, then multiply each row with the second matrix which we split the same way. Once we’ve recursed down to the level of two vectors, we can take the dot product by summing the dot products of their respective left and right sides.",Oe,ut,ln="Out of laziness, I made this approach work only good enough for matrices of size a power of 2, but I don’t think it’s hard to generalize it to any size with a couple more type matching cases.",Se,Ct,an="Code for this approach is in <code>tree.bend</code>.",Ue,g,on="In general, implementations must be tailored for Bend",We,ht,pn="While “if your code <em>can</em> run in parallel, it <em>will</em> run in parallel”, what I learned from designing these two matrix data structures is that it turns out making sure your code <em>can</em> run in parallel is not so easy. You will almost certainly have to write or redesign your data to work with Bend in a way that you yourself know will be highly parallelizable - in other words, Bend isn’t magic.",Ge,yt,rn="This reduces the value proposition of Bend, at least for me, as I want to get my parallelism “for free” - I don’t want to put in on the order of the same amount of work as I would have if I started in python and then added threads myself. Sure, I don’t have to deal with <em>actual</em> parallelization code, like mutexes and condition variables, but it’s still quite a bit of wrangling to make Bend compute what I want in a way Bend can actually optimize.",Qe,mt,dn="One caveat is that we don’t have to make <em>every</em> operation parallel - in our case, we can choose to only parallelize the operation of initializing each dot product, and keep the dot products themselves as slow O(n) lists - bringing the real world computer into the picture, this is probably fine or even better than the fully parallelized alternative. In exchange we will get a somewhat simpler implementation.",Ve,ft,cn="Intuitively, I would expect that as soon as we’ve parallelized enough to utilize all of the separate processing units on our computer or GPU, further parallelization isn’t helpful - and this threshold can be reached pretty quickly.",Ke,T,un="Too much matching",Ye,vt,Cn="This is a bit of an annoyance I had: every time I want to use a variable, I have to first match its type before I can reference its contents. My code has tall towers of matches and cases when I have any kind of nesting in my types.",Je,At,hn="Philosophically, it seems like Bend should either be strongly typed, or not have this matching requirement. What we have is certainly not as ergonomic as Python, which does not care and just throws errors when variables aren’t a compatible type.",Re,F,yn="Speed test",Xe,Dt,mn="To test the two implementations, I encoded the multiplication of two identity matrices. I’m sure more interesting matrices can be multiplied, but it’s quite a bit of effort to encode a particular matrix in either of the two bend schemes. To factor out the time it takes to initialize the matrix, I allow each program to run the computation either once or twice, then subtract. Note that Bend can run in both single-threaded and multithreaded mode, using the run and run-c arguments respectively.",Ze,wt,fn="I also wrote a naive python implementation which goes about the computation in a fairly standard dot-product-by-dot-product way, as well as a similar C implementation. I had ChatGPT generate a multithreaded version of the python code (don’t be surprised if it’s not good code). Finally, I threw in a Numpy version.",ts,xt,vn="All tests were run on a GCP instance with 8 cores and 60 GB of memory except the C one, which I ran on my computer because the binary wasn’t compatible. I tried Bend’s CUDA execution on the GCP instance’s T4 GPU, but unfortunately kept running into CUDA errors I couldn’t troubleshoot.",es,bt,An="In the table, we multiply two identity matrices of size 2^n by 2^n. MT means multithreaded. Times are in seconds.  First four result columns are Bend.",ss,Bt,Dn="<thead><tr><th>n</th> <th>MT Map</th> <th>Map</th> <th>Tree</th> <th>MT Tree</th> <th>Py</th> <th>MT Py</th> <th>C</th> <th>Numpy</th></tr></thead> <tbody><tr><td>3</td> <td>.31</td> <td>.12</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td></tr> <tr><td>4</td> <td>2.9</td> <td>1.7</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td></tr> <tr><td>5</td> <td>43</td> <td>29</td> <td>.48</td> <td></td> <td></td> <td></td> <td></td> <td></td></tr> <tr><td>6</td> <td></td> <td></td> <td>3.9</td> <td>1.1</td> <td></td> <td></td> <td></td> <td></td></tr> <tr><td>7</td> <td></td> <td></td> <td>33</td> <td>3.3</td> <td>.36</td> <td>.27</td> <td></td> <td></td></tr> <tr><td>8</td> <td></td> <td></td> <td></td> <td>20</td> <td>2.7</td> <td>2.2</td> <td></td> <td></td></tr> <tr><td>9</td> <td></td> <td></td> <td></td> <td></td> <td>24</td> <td>19</td> <td>.32</td> <td></td></tr> <tr><td>10</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td>2.4</td> <td></td></tr> <tr><td>11</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td>53</td> <td></td></tr> <tr><td>12</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td>.37</td></tr> <tr><td>13</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td>3.0</td></tr> <tr><td>14</td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td>22</td></tr></tbody>",ns,_t,wn="Some notes:",ls,kt,xn="<li>Some of the fast bend trials were extremely noisy, sometimes taking longer than the next order of n; I’m not too interested in statistically sound results so I reran those ones.</li> <li>Sometimes the larger bend trials ran out of memory.</li> <li>Though I couldn’t get Bend’s CUDA version to work (not a fault of Bend), the docs report a 5x speedup while using CUDA over the regular multithreaded version - this would put the MT Tree on the same order as the (sequential) Python program. (Though this 5x speedup was computed on a small, sub 1s timescale, and I’d expect CUDA to have high multithreading overhead.)</li>",as,gt,bn="There’s some interesting data here. First, we find that multithreading the map implementation actually slows it down, so it has a very high overhead for multithreading. It’s also about two orders slower than the tree version; this I expected because the tree version has a lot fewer bookkeeping and overall unnecessary computations involved.",os,Tt,Bn="Multithreading the tree version boosts it by a little over one order, putting it about one order behind the naive python program.  (One order here is about a factor of 8 in raw computation, since the algorithm we compute is O(x^3) for matrices of size x). The multithreaded Python program only has a slight boost over its normal counterpart. From there, the C and Numpy programs are 2 and 5 orders ahead respectively (Numpy might take advantage of the identity-ness of the matrices.)",ps,Ft,_n="Anecdotally, I also think there’s some role being played by memory and garbage collection; the first trial I run in Bend on a fresh restart seems less likely to hit OOM errors than later ones.",is,E,kn="Conclusion",rs,Et,gn="I think what I kind of wanted from Bend going into this is the ability to look at a piece of code like:",ds,Yt,Vn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">int</span><span style="color:#A6ACCD"> x </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#A6ACCD">for (</span><span style="color:#91B4D5">int</span><span style="color:#A6ACCD"> i </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">; i </span><span style="color:#91B4D5">&#x3C;</span><span style="color:#5DE4C7"> 100</span><span style="color:#A6ACCD">; i</span><span style="color:#91B4D5">++</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">	x </span><span style="color:#91B4D5">+=</span><span style="color:#A6ACCD"> i;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,Jt,It,Tn="and for Bend to read this and (through some math-y functional programming magic) say “Oh look! Each iteration of the for loop doesn’t actually depend on what happened in any of the other iterations. I can parallelize this.” and compile/transpile/run something like",cs,Rt,Kn=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#91B4D5">void</span><span style="color:#ADD7FF"> add_to_sum</span><span style="color:#A6ACCD">(</span><span style="color:#91B4D5">int</span><span style="color:#E4F0FB"> value</span><span style="color:#A6ACCD">, std::atomic</span><span style="color:#91B4D5">&#x3C;int>&#x26;</span><span style="color:#E4F0FB"> result</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#A6ACCD">    result </span><span style="color:#91B4D5">+=</span><span style="color:#A6ACCD"> value;</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">atomic</span><span style="color:#91B4D5">&#x3C;int></span><span style="color:#ADD7FF"> x</span><span style="color:#A6ACCD">(</span><span style="color:#5DE4C7">0</span><span style="color:#A6ACCD">);</span></span>
<span class="line"><span style="color:#A6ACCD">vector</span><span style="color:#91B4D5">&#x3C;</span><span style="color:#A6ACCD">thread</span><span style="color:#91B4D5">></span><span style="color:#A6ACCD"> threads;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">for (</span><span style="color:#91B4D5">int</span><span style="color:#A6ACCD"> i </span><span style="color:#91B4D5">=</span><span style="color:#5DE4C7"> 0</span><span style="color:#A6ACCD">; i </span><span style="color:#91B4D5">&#x3C;</span><span style="color:#5DE4C7"> 100</span><span style="color:#A6ACCD">; i</span><span style="color:#91B4D5">++</span><span style="color:#A6ACCD">) &#123;</span></span>
<span class="line"><span style="color:#E4F0FB">	threads</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">push_back</span><span style="color:#A6ACCD">(add_to_sum, i, </span><span style="color:#E4F0FBD0">ref</span><span style="color:#A6ACCD">(x));</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD">for (auto</span><span style="color:#91B4D5">&#x26;</span><span style="color:#A6ACCD"> t : threads) &#123;</span></span>
<span class="line"><span style="color:#E4F0FB">	t</span><span style="color:#A6ACCD">.</span><span style="color:#ADD7FF">join</span><span style="color:#A6ACCD">();</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,Xt,Lt,Fn="(Under the assumption that addition is a really long and tedious computation. The relative ease of computing dot products is perhaps a major flaw in my case study, as it likely fails to play to Bend’s strength.)",us,Pt,En="Instead of this, it feels like I myself have to spell it out for Bend in my implementation. In other words, it feels like I myself would be able to write an interpreter for Bend code that can be maximally multithreaded - just spawn new threads whenever I hit a match/fold/bend statement (it would be really hard and definitely above my pay grade, obviously, but the point is I can see how it might be done.)",Cs,Mt,In="I think Bend’s dream is interesting and cool - our computers have lots of cores and threads, but we almost never write our programs in a way that utilizes them on the first pass. In theory, Bend automates all the heavy lifting of creating threads, mutexes, and so on. In practice, Bend requires a ton of logic fine-tuning just to make a program compatible with Bend’s scheme of computation - and this is ignoring the current lack of raw performance, which I’m sure will improve rapidly over time. I’m interested to see how Bend progresses in development.";return{c(){r=o("h2"),r.textContent=C,u=l(),d=o("ul"),d.innerHTML=c,m=l(),f=o("h2"),f.textContent=ys,Zt=l(),I=o("p"),I.innerHTML=ms,te=l(),L=o("p"),L.textContent=fs,ee=l(),P=o("ol"),P.innerHTML=vs,se=l(),M=o("p"),M.textContent=As,ne=l(),H=o("p"),H.textContent=Ds,le=l(),D=o("h2"),D.textContent=ws,ae=l(),z=o("p"),z.innerHTML=xs,oe=l(),Ht=new v(!1),zt=l(),j=o("p"),j.textContent=bs,pe=l(),N=o("p"),N.innerHTML=Bs,ie=l(),q=o("p"),q.textContent=_s,re=l(),$=o("p"),$.textContent=ks,de=l(),jt=new v(!1),Nt=l(),O=o("p"),O.innerHTML=gs,ce=l(),qt=new v(!1),$t=l(),S=o("p"),S.innerHTML=Ts,ue=l(),w=o("h2"),w.textContent=Fs,Ce=l(),U=o("p"),U.textContent=Es,he=l(),x=o("h2"),x.textContent=Is,ye=l(),W=o("p"),W.textContent=Ls,me=l(),Ot=new v(!1),St=l(),G=o("p"),G.textContent=Ps,fe=l(),Q=o("p"),Q.textContent=Ms,ve=l(),V=o("p"),V.textContent=Hs,Ae=l(),b=o("h2"),b.textContent=zs,De=l(),K=o("p"),K.textContent=js,we=l(),Y=o("p"),Y.textContent=Ns,xe=l(),J=o("p"),J.textContent=qs,be=l(),R=o("p"),R.textContent=$s,Be=l(),B=o("h2"),B.textContent=Os,_e=l(),X=o("p"),X.textContent=Ss,ke=l(),Ut=new v(!1),Wt=l(),Z=o("p"),Z.textContent=Us,ge=l(),tt=o("p"),tt.textContent=Ws,Te=l(),et=o("p"),et.textContent=Gs,Fe=l(),st=o("p"),st.textContent=Qs,Ee=l(),nt=o("p"),nt.innerHTML=Vs,Ie=l(),_=o("h2"),_.innerHTML=Ks,Le=l(),lt=o("p"),lt.innerHTML=Ys,Pe=l(),Gt=new v(!1),Qt=l(),at=o("p"),at.textContent=Js,Me=l(),ot=o("p"),ot.innerHTML=Rs,He=l(),pt=o("p"),pt.innerHTML=Xs,ze=l(),it=o("p"),it.innerHTML=Zs,je=l(),k=o("h2"),k.textContent=tn,Ne=l(),rt=o("p"),rt.textContent=en,qe=l(),dt=o("p"),dt.textContent=sn,$e=l(),Vt=new v(!1),Kt=l(),ct=o("p"),ct.textContent=nn,Oe=l(),ut=o("p"),ut.textContent=ln,Se=l(),Ct=o("p"),Ct.innerHTML=an,Ue=l(),g=o("h2"),g.textContent=on,We=l(),ht=o("p"),ht.innerHTML=pn,Ge=l(),yt=o("p"),yt.innerHTML=rn,Qe=l(),mt=o("p"),mt.innerHTML=dn,Ve=l(),ft=o("p"),ft.textContent=cn,Ke=l(),T=o("h2"),T.textContent=un,Ye=l(),vt=o("p"),vt.textContent=Cn,Je=l(),At=o("p"),At.textContent=hn,Re=l(),F=o("h2"),F.textContent=yn,Xe=l(),Dt=o("p"),Dt.textContent=mn,Ze=l(),wt=o("p"),wt.textContent=fn,ts=l(),xt=o("p"),xt.textContent=vn,es=l(),bt=o("p"),bt.textContent=An,ss=l(),Bt=o("table"),Bt.innerHTML=Dn,ns=l(),_t=o("p"),_t.textContent=wn,ls=l(),kt=o("ul"),kt.innerHTML=xn,as=l(),gt=o("p"),gt.textContent=bn,os=l(),Tt=o("p"),Tt.textContent=Bn,ps=l(),Ft=o("p"),Ft.textContent=_n,is=l(),E=o("h2"),E.textContent=kn,rs=l(),Et=o("p"),Et.textContent=gn,ds=l(),Yt=new v(!1),Jt=l(),It=o("p"),It.textContent=Tn,cs=l(),Rt=new v(!1),Xt=l(),Lt=o("p"),Lt.textContent=Fn,us=l(),Pt=o("p"),Pt.textContent=En,Cs=l(),Mt=o("p"),Mt.textContent=In,this.h()},l(t){r=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(r)!=="svelte-mkui86"&&(r.textContent=C),u=a(t),d=p(t,"UL",{"data-svelte-h":!0}),i(d)!=="svelte-1rh8wt3"&&(d.innerHTML=c),m=a(t),f=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(f)!=="svelte-p88ani"&&(f.textContent=ys),Zt=a(t),I=p(t,"P",{"data-svelte-h":!0}),i(I)!=="svelte-135bymc"&&(I.innerHTML=ms),te=a(t),L=p(t,"P",{"data-svelte-h":!0}),i(L)!=="svelte-1jc06o8"&&(L.textContent=fs),ee=a(t),P=p(t,"OL",{"data-svelte-h":!0}),i(P)!=="svelte-st58ab"&&(P.innerHTML=vs),se=a(t),M=p(t,"P",{"data-svelte-h":!0}),i(M)!=="svelte-1aqyay"&&(M.textContent=As),ne=a(t),H=p(t,"P",{"data-svelte-h":!0}),i(H)!=="svelte-104vkmt"&&(H.textContent=Ds),le=a(t),D=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(D)!=="svelte-1citfpt"&&(D.textContent=ws),ae=a(t),z=p(t,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1ejf3m"&&(z.innerHTML=xs),oe=a(t),Ht=A(t,!1),zt=a(t),j=p(t,"P",{"data-svelte-h":!0}),i(j)!=="svelte-1hkxguz"&&(j.textContent=bs),pe=a(t),N=p(t,"P",{"data-svelte-h":!0}),i(N)!=="svelte-5vy4op"&&(N.innerHTML=Bs),ie=a(t),q=p(t,"P",{"data-svelte-h":!0}),i(q)!=="svelte-15vsyuo"&&(q.textContent=_s),re=a(t),$=p(t,"P",{"data-svelte-h":!0}),i($)!=="svelte-1hc5t14"&&($.textContent=ks),de=a(t),jt=A(t,!1),Nt=a(t),O=p(t,"P",{"data-svelte-h":!0}),i(O)!=="svelte-6gqk89"&&(O.innerHTML=gs),ce=a(t),qt=A(t,!1),$t=a(t),S=p(t,"P",{"data-svelte-h":!0}),i(S)!=="svelte-unhppr"&&(S.innerHTML=Ts),ue=a(t),w=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(w)!=="svelte-1j5vhxy"&&(w.textContent=Fs),Ce=a(t),U=p(t,"P",{"data-svelte-h":!0}),i(U)!=="svelte-q5lsin"&&(U.textContent=Es),he=a(t),x=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(x)!=="svelte-sibjp4"&&(x.textContent=Is),ye=a(t),W=p(t,"P",{"data-svelte-h":!0}),i(W)!=="svelte-157uflz"&&(W.textContent=Ls),me=a(t),Ot=A(t,!1),St=a(t),G=p(t,"P",{"data-svelte-h":!0}),i(G)!=="svelte-en2w74"&&(G.textContent=Ps),fe=a(t),Q=p(t,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-1afv4j2"&&(Q.textContent=Ms),ve=a(t),V=p(t,"P",{"data-svelte-h":!0}),i(V)!=="svelte-uvpuqz"&&(V.textContent=Hs),Ae=a(t),b=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(b)!=="svelte-10ff6gi"&&(b.textContent=zs),De=a(t),K=p(t,"P",{"data-svelte-h":!0}),i(K)!=="svelte-ksssn2"&&(K.textContent=js),we=a(t),Y=p(t,"P",{"data-svelte-h":!0}),i(Y)!=="svelte-k5guvn"&&(Y.textContent=Ns),xe=a(t),J=p(t,"P",{"data-svelte-h":!0}),i(J)!=="svelte-1h4mrc9"&&(J.textContent=qs),be=a(t),R=p(t,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1ac1kp5"&&(R.textContent=$s),Be=a(t),B=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(B)!=="svelte-1m3l8ii"&&(B.textContent=Os),_e=a(t),X=p(t,"P",{"data-svelte-h":!0}),i(X)!=="svelte-1d2egmj"&&(X.textContent=Ss),ke=a(t),Ut=A(t,!1),Wt=a(t),Z=p(t,"P",{"data-svelte-h":!0}),i(Z)!=="svelte-1t74hzz"&&(Z.textContent=Us),ge=a(t),tt=p(t,"P",{"data-svelte-h":!0}),i(tt)!=="svelte-1egsmzo"&&(tt.textContent=Ws),Te=a(t),et=p(t,"P",{"data-svelte-h":!0}),i(et)!=="svelte-ub5bwc"&&(et.textContent=Gs),Fe=a(t),st=p(t,"P",{"data-svelte-h":!0}),i(st)!=="svelte-3jphzr"&&(st.textContent=Qs),Ee=a(t),nt=p(t,"P",{"data-svelte-h":!0}),i(nt)!=="svelte-nqhcgx"&&(nt.innerHTML=Vs),Ie=a(t),_=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(_)!=="svelte-1j3xlah"&&(_.innerHTML=Ks),Le=a(t),lt=p(t,"P",{"data-svelte-h":!0}),i(lt)!=="svelte-4wd5h"&&(lt.innerHTML=Ys),Pe=a(t),Gt=A(t,!1),Qt=a(t),at=p(t,"P",{"data-svelte-h":!0}),i(at)!=="svelte-hjq2i7"&&(at.textContent=Js),Me=a(t),ot=p(t,"P",{"data-svelte-h":!0}),i(ot)!=="svelte-115vu56"&&(ot.innerHTML=Rs),He=a(t),pt=p(t,"P",{"data-svelte-h":!0}),i(pt)!=="svelte-m91itv"&&(pt.innerHTML=Xs),ze=a(t),it=p(t,"P",{"data-svelte-h":!0}),i(it)!=="svelte-1s8uovp"&&(it.innerHTML=Zs),je=a(t),k=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(k)!=="svelte-1641qdv"&&(k.textContent=tn),Ne=a(t),rt=p(t,"P",{"data-svelte-h":!0}),i(rt)!=="svelte-1ui4l2u"&&(rt.textContent=en),qe=a(t),dt=p(t,"P",{"data-svelte-h":!0}),i(dt)!=="svelte-150z8si"&&(dt.textContent=sn),$e=a(t),Vt=A(t,!1),Kt=a(t),ct=p(t,"P",{"data-svelte-h":!0}),i(ct)!=="svelte-1t3j4ku"&&(ct.textContent=nn),Oe=a(t),ut=p(t,"P",{"data-svelte-h":!0}),i(ut)!=="svelte-16d8oim"&&(ut.textContent=ln),Se=a(t),Ct=p(t,"P",{"data-svelte-h":!0}),i(Ct)!=="svelte-1vjdfup"&&(Ct.innerHTML=an),Ue=a(t),g=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(g)!=="svelte-11l3hwn"&&(g.textContent=on),We=a(t),ht=p(t,"P",{"data-svelte-h":!0}),i(ht)!=="svelte-1ge0d0s"&&(ht.innerHTML=pn),Ge=a(t),yt=p(t,"P",{"data-svelte-h":!0}),i(yt)!=="svelte-hs67zz"&&(yt.innerHTML=rn),Qe=a(t),mt=p(t,"P",{"data-svelte-h":!0}),i(mt)!=="svelte-1569d9d"&&(mt.innerHTML=dn),Ve=a(t),ft=p(t,"P",{"data-svelte-h":!0}),i(ft)!=="svelte-11hpdqg"&&(ft.textContent=cn),Ke=a(t),T=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(T)!=="svelte-zayv58"&&(T.textContent=un),Ye=a(t),vt=p(t,"P",{"data-svelte-h":!0}),i(vt)!=="svelte-1vqg4z4"&&(vt.textContent=Cn),Je=a(t),At=p(t,"P",{"data-svelte-h":!0}),i(At)!=="svelte-eundns"&&(At.textContent=hn),Re=a(t),F=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(F)!=="svelte-12fulh1"&&(F.textContent=yn),Xe=a(t),Dt=p(t,"P",{"data-svelte-h":!0}),i(Dt)!=="svelte-5tkv2o"&&(Dt.textContent=mn),Ze=a(t),wt=p(t,"P",{"data-svelte-h":!0}),i(wt)!=="svelte-17x1ubp"&&(wt.textContent=fn),ts=a(t),xt=p(t,"P",{"data-svelte-h":!0}),i(xt)!=="svelte-1wghyjk"&&(xt.textContent=vn),es=a(t),bt=p(t,"P",{"data-svelte-h":!0}),i(bt)!=="svelte-1ji8ne3"&&(bt.textContent=An),ss=a(t),Bt=p(t,"TABLE",{"data-svelte-h":!0}),i(Bt)!=="svelte-1oxzbov"&&(Bt.innerHTML=Dn),ns=a(t),_t=p(t,"P",{"data-svelte-h":!0}),i(_t)!=="svelte-a5ej3t"&&(_t.textContent=wn),ls=a(t),kt=p(t,"UL",{"data-svelte-h":!0}),i(kt)!=="svelte-671rmg"&&(kt.innerHTML=xn),as=a(t),gt=p(t,"P",{"data-svelte-h":!0}),i(gt)!=="svelte-177hvj5"&&(gt.textContent=bn),os=a(t),Tt=p(t,"P",{"data-svelte-h":!0}),i(Tt)!=="svelte-146yau7"&&(Tt.textContent=Bn),ps=a(t),Ft=p(t,"P",{"data-svelte-h":!0}),i(Ft)!=="svelte-exe35p"&&(Ft.textContent=_n),is=a(t),E=p(t,"H2",{id:!0,"data-svelte-h":!0}),i(E)!=="svelte-1cykd0u"&&(E.textContent=kn),rs=a(t),Et=p(t,"P",{"data-svelte-h":!0}),i(Et)!=="svelte-1j20a9j"&&(Et.textContent=gn),ds=a(t),Yt=A(t,!1),Jt=a(t),It=p(t,"P",{"data-svelte-h":!0}),i(It)!=="svelte-z649ra"&&(It.textContent=Tn),cs=a(t),Rt=A(t,!1),Xt=a(t),Lt=p(t,"P",{"data-svelte-h":!0}),i(Lt)!=="svelte-zwltr7"&&(Lt.textContent=Fn),us=a(t),Pt=p(t,"P",{"data-svelte-h":!0}),i(Pt)!=="svelte-1ukha4v"&&(Pt.textContent=En),Cs=a(t),Mt=p(t,"P",{"data-svelte-h":!0}),i(Mt)!=="svelte-q5df98"&&(Mt.textContent=In),this.h()},h(){y(r,"id","contents"),y(f,"id","introduction"),y(D,"id","quick-background"),Ht.a=zt,jt.a=Nt,qt.a=$t,y(w,"id","goal"),y(x,"id","attempt-1-lists"),Ot.a=St,y(b,"id","attempt-2-maps"),y(B,"id","attempt-3-maps-merge-sort-style"),Ut.a=Wt,y(_,"id","fold-is-a-subset-of-match-but-why-use-fold"),Gt.a=Qt,y(k,"id","attempt-4-no-maps-custom-trees"),Vt.a=Kt,y(g,"id","in-general-implementations-must-be-tailored-for-bend"),y(T,"id","too-much-matching"),y(F,"id","speed-test"),y(E,"id","conclusion"),Yt.a=Jt,Rt.a=Xt},m(t,e){s(t,r,e),s(t,u,e),s(t,d,e),s(t,m,e),s(t,f,e),s(t,Zt,e),s(t,I,e),s(t,te,e),s(t,L,e),s(t,ee,e),s(t,P,e),s(t,se,e),s(t,M,e),s(t,ne,e),s(t,H,e),s(t,le,e),s(t,D,e),s(t,ae,e),s(t,z,e),s(t,oe,e),Ht.m($n,t,e),s(t,zt,e),s(t,j,e),s(t,pe,e),s(t,N,e),s(t,ie,e),s(t,q,e),s(t,re,e),s(t,$,e),s(t,de,e),jt.m(On,t,e),s(t,Nt,e),s(t,O,e),s(t,ce,e),qt.m(Sn,t,e),s(t,$t,e),s(t,S,e),s(t,ue,e),s(t,w,e),s(t,Ce,e),s(t,U,e),s(t,he,e),s(t,x,e),s(t,ye,e),s(t,W,e),s(t,me,e),Ot.m(Un,t,e),s(t,St,e),s(t,G,e),s(t,fe,e),s(t,Q,e),s(t,ve,e),s(t,V,e),s(t,Ae,e),s(t,b,e),s(t,De,e),s(t,K,e),s(t,we,e),s(t,Y,e),s(t,xe,e),s(t,J,e),s(t,be,e),s(t,R,e),s(t,Be,e),s(t,B,e),s(t,_e,e),s(t,X,e),s(t,ke,e),Ut.m(Wn,t,e),s(t,Wt,e),s(t,Z,e),s(t,ge,e),s(t,tt,e),s(t,Te,e),s(t,et,e),s(t,Fe,e),s(t,st,e),s(t,Ee,e),s(t,nt,e),s(t,Ie,e),s(t,_,e),s(t,Le,e),s(t,lt,e),s(t,Pe,e),Gt.m(Gn,t,e),s(t,Qt,e),s(t,at,e),s(t,Me,e),s(t,ot,e),s(t,He,e),s(t,pt,e),s(t,ze,e),s(t,it,e),s(t,je,e),s(t,k,e),s(t,Ne,e),s(t,rt,e),s(t,qe,e),s(t,dt,e),s(t,$e,e),Vt.m(Qn,t,e),s(t,Kt,e),s(t,ct,e),s(t,Oe,e),s(t,ut,e),s(t,Se,e),s(t,Ct,e),s(t,Ue,e),s(t,g,e),s(t,We,e),s(t,ht,e),s(t,Ge,e),s(t,yt,e),s(t,Qe,e),s(t,mt,e),s(t,Ve,e),s(t,ft,e),s(t,Ke,e),s(t,T,e),s(t,Ye,e),s(t,vt,e),s(t,Je,e),s(t,At,e),s(t,Re,e),s(t,F,e),s(t,Xe,e),s(t,Dt,e),s(t,Ze,e),s(t,wt,e),s(t,ts,e),s(t,xt,e),s(t,es,e),s(t,bt,e),s(t,ss,e),s(t,Bt,e),s(t,ns,e),s(t,_t,e),s(t,ls,e),s(t,kt,e),s(t,as,e),s(t,gt,e),s(t,os,e),s(t,Tt,e),s(t,ps,e),s(t,Ft,e),s(t,is,e),s(t,E,e),s(t,rs,e),s(t,Et,e),s(t,ds,e),Yt.m(Vn,t,e),s(t,Jt,e),s(t,It,e),s(t,cs,e),Rt.m(Kn,t,e),s(t,Xt,e),s(t,Lt,e),s(t,us,e),s(t,Pt,e),s(t,Cs,e),s(t,Mt,e)},p:Zn,d(t){t&&(n(r),n(u),n(d),n(m),n(f),n(Zt),n(I),n(te),n(L),n(ee),n(P),n(se),n(M),n(ne),n(H),n(le),n(D),n(ae),n(z),n(oe),Ht.d(),n(zt),n(j),n(pe),n(N),n(ie),n(q),n(re),n($),n(de),jt.d(),n(Nt),n(O),n(ce),qt.d(),n($t),n(S),n(ue),n(w),n(Ce),n(U),n(he),n(x),n(ye),n(W),n(me),Ot.d(),n(St),n(G),n(fe),n(Q),n(ve),n(V),n(Ae),n(b),n(De),n(K),n(we),n(Y),n(xe),n(J),n(be),n(R),n(Be),n(B),n(_e),n(X),n(ke),Ut.d(),n(Wt),n(Z),n(ge),n(tt),n(Te),n(et),n(Fe),n(st),n(Ee),n(nt),n(Ie),n(_),n(Le),n(lt),n(Pe),Gt.d(),n(Qt),n(at),n(Me),n(ot),n(He),n(pt),n(ze),n(it),n(je),n(k),n(Ne),n(rt),n(qe),n(dt),n($e),Vt.d(),n(Kt),n(ct),n(Oe),n(ut),n(Se),n(Ct),n(Ue),n(g),n(We),n(ht),n(Ge),n(yt),n(Qe),n(mt),n(Ve),n(ft),n(Ke),n(T),n(Ye),n(vt),n(Je),n(At),n(Re),n(F),n(Xe),n(Dt),n(Ze),n(wt),n(ts),n(xt),n(es),n(bt),n(ss),n(Bt),n(ns),n(_t),n(ls),n(kt),n(as),n(gt),n(os),n(Tt),n(ps),n(Ft),n(is),n(E),n(rs),n(Et),n(ds),Yt.d(),n(Jt),n(It),n(cs),Rt.d(),n(Xt),n(Lt),n(us),n(Pt),n(Cs),n(Mt))}}}function rl(h){let r,C;const u=[h[0],Mn];let d={$$slots:{default:[il]},$$scope:{ctx:h}};for(let c=0;c<u.length;c+=1)d=hs(d,u[c]);return r=new pl({props:d}),{c(){tl(r.$$.fragment)},l(c){el(r.$$.fragment,c)},m(c,m){sl(r,c,m),C=!0},p(c,[m]){const f=m&1?ll(u,[m&1&&Pn(c[0]),m&0&&Pn(Mn)]):{};m&2&&(f.$$scope={dirty:m,ctx:c}),r.$set(f)},i(c){C||(Nn(r.$$.fragment,c),C=!0)},o(c){qn(r.$$.fragment,c),C=!1},d(c){nl(r,c)}}}const Mn={title:"I tried Bend",description:"A case study and lessons learned from Bend, the new massively parallel programming language",date:"2024-6-20",categories:["Bend","Programming"],published:!0};function dl(h,r,C){return h.$$set=u=>{C(0,r=hs(hs({},r),Ln(u)))},r=Ln(r),[r]}class hl extends zn{constructor(r){super(),jn(this,r,dl,rl,Hn,{})}}export{hl as default,Mn as metadata};
